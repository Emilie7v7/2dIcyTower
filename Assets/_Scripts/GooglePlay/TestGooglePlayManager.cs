using UnityEngine;
using GooglePlayGames;
using GooglePlayGames.BasicApi; // for SignInStatus
using TMPro;

public class TestGooglePlayV2 : MonoBehaviour
{
    [SerializeField] private TextMeshProUGUI text;

    void Start()
    {
        PlayGamesPlatform.DebugLogEnabled = true; // verbose SDK logs
        Debug.Log($"[GPG] Starting auth. Pkg: {Application.identifier}");
        TryLogAppId();

        // Auto sign-in attempt
        PlayGamesPlatform.Instance.Authenticate(OnAuth);
    }

    // Hook this to a UI button
    public void RetrySignIn()
    {
        PlayGamesPlatform.DebugLogEnabled = true;
        Debug.Log("[GPG] Manual auth requested");
        PlayGamesPlatform.Instance.ManuallyAuthenticate(OnAuth);
    }

    private void OnAuth(SignInStatus status)
    {
        if (text == null) Debug.LogWarning("[GPG] TMP text not assigned.");

        var p = PlayGamesPlatform.Instance;
        var authFlag = p != null && p.localUser != null && p.localUser.authenticated;

        Debug.Log($"[GPG] Auth callback. Status: {status}  Authenticated flag: {authFlag}");

        if (status == SignInStatus.Success)
        {
            var name = p.GetUserDisplayName();
            if (text) text.text = $"Signed in as:\n{name}";
            Debug.Log($"[GPG] Sign-in success. DisplayName: {name}  Id: {p.GetUserId()}  ImgUrl: {p.GetUserImageUrl()}");
        }
        else
        {
            if (text) text.text = $"Sign in failed: {status}\nTap Retry.";
            Debug.LogWarning($"[GPG] Sign-in failed. Status: {status}");
        }
    }

    private void TryLogAppId()
    {
        // Logs the generated AppId constant if present
        try
        {
            // GPGSIds is generated by the setup wizard. If missing, this will throw.
            var appId = GPGSIds.AppId;
            Debug.Log($"[GPG] AppId from GPGSIds: {appId}");
        }
        catch
        {
            Debug.Log("[GPG] GPGSIds.AppId not found. Re-run Window > Google Play Games > Setup > Android Setup.");
        }
    }
}
